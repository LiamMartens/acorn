<?php

namespace Roots\Acorn\Console\Commands;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Filesystem\Filesystem;
use Roots\Acorn\Bootloader;
use Roots\Acorn\Console\Commands\Command;
use Symfony\Component\HttpFoundation\File\Exception\CannotWriteFileException;

class AcornDumpBootloaderCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'acorn:dump-bootloader {plugin=' . WPMU_PLUGIN_DIR . '/acorn-bootloader.php : Path to write bootloader.} {--no-app : Do not write companion app.php to bootstrap path.}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Dumps the current Bootloader config to a file.';

    /**
     * Filesystem instance.
     *
     * @var \Illuminate\Filesystem\Filesystem
     */
    protected $files;

    /**
     * Create a new command instance.
     *
     * @param  \Illuminate\Filesystem\Filesystem  $files
     * @return void
     */
    public function __construct(Filesystem $files)
    {
        parent::__construct();

        $this->files = $files;
    }

    public function handle()
    {
        if (strstr(__DIR__, WP_CONTENT_DIR) !== false) {
            $this->info("Cannot dump bootloader when Acorn is loaded via a theme or plugin.");
            return;
        }

        $plugin = $this->argument('plugin');

        if (! is_writable(dirname($plugin))) {
            throw new \Symfony\Component\Finder\Exception\DirectoryNotFoundException(
                'The ' . dirname($plugin) . ' directory must be present and writable.'
            );
        }

        $bootloaderClass = get_class(Bootloader::getInstance());
        $applicationClass = get_class(Bootloader::getInstance()->getApplication());

        /** @var \Illuminate\Contracts\Foundation\Application */
        $app = (new $bootloaderClass())->getApplication();

        if (! $this->files->put($plugin, $this->getPlugin($app, $bootloaderClass, $applicationClass), true)) {
            throw new CannotWriteFileException("Failed to write {$plugin}.");
        }

        $this->line("<info>Successfully generated</info> <comment>{$plugin}</comment>");

        if ($this->option('no-app')) {
            return;
        }

        if (! $this->files->put($app_path = $app->bootstrapPath('app.php'), $this->getBootstrapApp($app, $bootloaderClass, $applicationClass))) {
            throw new CannotWriteFileException("Failed to write {$app_path}.");
        }

        $this->line("<info>Successfully generated</info> <comment>{$app_path}</comment>");
    }

    protected function getBootstrapApp(Application $app, $bootloaderClass, $applicationClass)
    {
        $use_paths = var_export($this->getApplicationPaths($app), true);

        return <<<PHP_CODE
        <?php

        // This file is generated by acorn:dump-bootloader

        return (new \\{$bootloaderClass}(new \\{$applicationClass}('{$app->basePath()}', {$use_paths})))->getApplication();
        PHP_CODE;
    }

    protected function getPlugin(Application $app, $bootloaderClass, $applicationClass)
    {
        $use_paths = var_export($this->getApplicationPaths($app), true);

        return <<<PHP_CODE
        <?php

        {$this->frontmatter($app)}

        // This file is generated by acorn:dump-bootloader

        try {
            (new \\{$bootloaderClass}(new \\{$applicationClass}('{$app->basePath()}', \$paths = {$use_paths})))->boot();
        } catch (\\Throwable \$e) {
            @unlink(__FILE__);
            @unlink("{\$paths['bootstrap']}/app.php");
            throw new \\Exception("Acorn failed to boot. Your bootloader file [" . __FILE__ . "] has been deleted.", 0, \$e);
        }
        PHP_CODE;
    }

    protected function frontmatter(Application $app)
    {
        $version = get_class($app)::VERSION ?? $app->version();

        return <<<FRONTMATTER
        /**
         * Plugin Name:   Acorn Bootloader
         * Plugin URI:    https://roots.io/acorn
         * Description:   Automatically boot Acorn framework.
         * Version:       {$version}
         * Author:        Roots
         * Author URI:    https://roots.io
         * License:       MIT
         * License URI:   http://opensource.org/licenses/MIT
         */
        FRONTMATTER;
    }

    protected function getApplicationPaths(Application $app)
    {
        return [
            'app' => method_exists($app, 'path') ? $app->path() : $app->make('path'),
            'lang' => method_exists($app, 'langPath') ? $app->langPath() : $app->make('path.lang'),
            'config' => $app->configPath(),
            'public' => method_exists($app, 'publicPath') ? $app->publicPath() : $app->make('path.public'),
            'storage' => $app->storagePath(),
            'database' => $app->databasePath(),
            'resources' => $app->resourcePath(),
            'bootstrap' => $app->bootstrapPath(),
        ];
    }
}
